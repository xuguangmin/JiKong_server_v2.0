#include    <stdio.h>     
#include    <stdlib.h>     
#include    <unistd.h>     
#include    <sys/types.h>
#include    <sys/stat.h>
#include    <fcntl.h>      
#include    <termios.h>    
#include    <errno.h>     
#include 	<string.h>
#include 	<pthread.h>
#include 	<dlfcn.h>

#include 	"sys_types/flx_methord.h"
#include 	"tcp_server/tps_tcp_server.h"
#include 	"../include/sys_types/flxtypes.h"
#include 	"device_controller/devc_serial_port.h"
#include	"../hmui_event_handlers/uie.h"


FLXInt32 (*ProcessEvent)(FLXInt32 senderId, FLXInt32 event, FLXByte *data, FLXInt32 dataLen);

#define MAX_PORT_NO 16
#define MAX_LEN     1024
#define TURE 1
 
//set serial prarm struct
typedef struct WP_UART_INIT
{
	FLXInt32 band;
	FLXByte data_bits;
	FLXByte parity;
	FLXByte data_stop_bits;
}WP_UART_INIT_STRU;

//ID ..operate file piont struct
struct WP_UART_MSG
{
	int senderId;
	int port;
	int isRunFlag;
	int handle;
};

//wp process event  prarm struct
typedef struct WP_PROCESS_EVENT
{
	FLXInt32 id;
	FLXInt32 event;
	FLXByte  data[MAX_LEN];
	FLXInt32 dataLen;
}WP_PROCESS_EVENT_STRU;


static struct WP_UART_MSG serialMsg[MAX_PORT_NO];
static FLXInt32 serialCount = 0; 

FLXInt32 devi_wp_init_serial_port(FLXInt32 senderId,FLXInt32 iPort, FLXInt32 iRate, FLXInt32 dataBit, FLXInt32 stopBit, FLXInt32 chkBit);
FLXInt32 devc_wp_init_serial_port(FLXInt32 port, FLXInt32 rate, FLXByte dataBits, FLXByte stopBits, FLXByte parity,FLXInt32 *iHandle);

FLXInt32 devi_wp_write_serial_data(FLXInt32 senderId, FLXChar *pcData, FLXInt32 iLen);
FLXInt32 devc_wp_write_serial_data(FLXInt32 handle, FLXChar *data, FLXInt32 len);

FLXInt32 devi_wp_read_serial_data(FLXInt32 senderId, FLXChar *data, FLXInt32 len);
FLXInt32 devc_wp_read_serial_data(FLXInt32 handle, FLXChar *pcData, FLXInt32 iLen);

FLXInt32 devi_wp_close_serial_port(FLXInt32 senderId);
FLXInt32 devc_wp_close_serial_port(FLXInt32 handle);


void tps_recv_sort(int senderId,char *data,int len);
void sort_serial_data(void *prarm);
void *uie_wp_process_event(void *param);


/**********************************/
		//初始化
/**********************************/
void sort_serial_data(void *prarm)
{
	struct WP_UART_MSG *pWpSerial = (struct WP_UART_MSG *)prarm;

	int len;
	while(pWpSerial->isRunFlag)
	{
		FLXChar pData[MAX_LEN] = {0};		
		len = devi_wp_read_serial_data(pWpSerial->senderId,pData,MAX_LEN);
		tps_recv_sort(pWpSerial->senderId,pData,len);
	}
}

FLXInt32 devi_wp_init_serial_port(FLXInt32 senderId,FLXInt32 iPort, FLXInt32 iRate, FLXInt32 dataBit, FLXInt32 stopBit, FLXInt32 chkBit)
{
	FLXInt32 iRet;
	pthread_t pid;
	
	if(serialMsg[serialCount].isRunFlag != 1)
	{
		if (devc_wp_init_serial_port(iPort, iRate, dataBit, stopBit, chkBit, &serialMsg[serialCount].handle) != 0)		
		{
			return -1;
		}
	}
	serialMsg[serialCount].senderId= senderId;
	serialMsg[serialCount].port= iPort;
	serialMsg[serialCount].isRunFlag = 1;

	iRet = thread_create(&pid, NULL, (void *)sort_serial_data, &serialMsg[serialCount]);	
	serialCount++;
	return 0;
}

FLXInt32 devc_wp_init_serial_port(FLXInt32 port, FLXInt32 rate, FLXByte dataBits, FLXByte stopBits, FLXByte parity,FLXInt32 *iHandle)
{
	FLXChar file[50] = "/dev/FPGA_Jikong";
	FLXChar fileNo[10] = {0};
	WP_UART_INIT_STRU uartParam;
	FLXInt32 iRet;
	pthread_t pid;
	int i;

	sprintf(fileNo, "%02d",port-1);
	strcat(file, fileNo);
	FLXInt32 fd = open(file, O_RDWR);
	if (fd < 0)
	{
		perror("Cannot Open Serial Port !\n");
		return -1;
	}
	uartParam.band = rate;
	uartParam.data_bits = dataBits;
	uartParam.parity = parity;
	uartParam.data_stop_bits = stopBits;
	if (ioctl(fd, 1, &uartParam) < 0)
	{
		perror("Call cmd IOCPRINT fail\n");
	 	return -1;
	}
	*iHandle =fd;
	return 0;
}


		//写数据
/**********************************/

FLXInt32 devi_wp_write_serial_data(FLXInt32 senderId, FLXChar *pcData, FLXInt32 iLen)
{
	FLXInt32 i;

	for (i = 0; i < serialCount; i++)
	{
		if (serialMsg[i].senderId == senderId)
			break;
	}

	if (i == serialCount)
	{
		return -1;
	}
	else
	{
		if (devc_wp_write_serial_data(serialMsg[i].handle, pcData, iLen) == -1)
			return -1;
		return 0;
	}
}

FLXInt32 devc_wp_write_serial_data(FLXInt32 handle,FLXChar * data,FLXInt32 len)
{
	if (write(handle, data, len) < 0)
		return -1;
	else
		return 0;
}


		//读数据
/**********************************/

FLXInt32 devi_wp_read_serial_data(FLXInt32 senderId, FLXChar *pcData, FLXInt32 iLen)
{
	FLXInt32 i;
	FLXInt32 len;
	for (i = 0; i < serialCount; i++)
	{
		if (serialMsg[i].senderId == senderId)
			break;
	}
	if (i == serialCount)
	{
		return -1;
	}
	else
	{
		if ((len = devc_wp_read_serial_data(serialMsg[i].handle, pcData, iLen)) <= 0)
			return -1;
		else
			return len;
	}
	return 0;
}

FLXInt32 devc_wp_read_serial_data(FLXInt32 handle, FLXChar *data, FLXInt32 len)
{
	FLXInt32 iReadLen = 0;
	FLXChar cBuff[10] = {0};
	FLXInt32 i;
	
	for (i = 0; i < len; i ++)
	{
		if (iReadLen = read(handle, cBuff, 1) > 0)
			data[i] = cBuff[0];
	}
	return iReadLen;
}


		//关闭
/**********************************/
FLXInt32 devi_wp_close_serial_port(FLXInt32 senderId)
{
	FLXInt32 i;
	for (i = 0; i < serialCount; i ++)
	{
		if (serialMsg[i].senderId == senderId)
			break;
	}

	if (i == serialCount)
	{
		return -1;
	}
	else
	{
		if (devc_wp_close_serial_port(serialMsg[i].handle) != 0)
			return -1;
		serialMsg[i].isRunFlag = 0;
	}
	return 0;
}

FLXInt32 devc_wp_close_serial_port(FLXInt32 handle)
{
	if (close(handle) != 0)
		return -1;
	else	
		return 0;
}

		// parityCheck  operation
/**********************************/
int parityCheck(unsigned char *data,int len)
{
	int dataSum = 0;
	int i;
	for(i = 0;i<len;i++)
	{
		dataSum +=(int)data[i];
	}
	return dataSum;
}

		//wp operation
/**********************************/
int wp_on(int senderId,int relayNo)
{
	int len;	
	unsigned char strMsg[9] = {0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	strMsg[6] = (unsigned char)relayNo;
	len = parityCheck(strMsg,7);
	strMsg[7] = len>0?(unsigned char)((len&0x0000FF00)>> 8):0;
	strMsg[8] = len>0?(unsigned char)(len&0x000000FF):0;	
	FLXInt32 i;
	
	for (i = 0; i < serialCount; i++)
	{
		if (serialMsg[i].senderId == senderId)
			break;
	}

	if (i == serialCount)
	{
		return -1;
	}
	else
	{
		if (devc_wp_write_serial_data(serialMsg[i].handle, strMsg, 9) == -1)
			return -1;
		return 0;
	}
}

int wp_off(int senderId,int relayNo)
{
	int len;
	int i;
	unsigned char strMsg[9] = {0x7e,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	strMsg[6] = (unsigned char)relayNo;
	len = parityCheck(strMsg,7);
	strMsg[7] = len>0?(unsigned char)((len&0x0000FF00)>> 8):0;
	strMsg[8] = len>0?(unsigned char)(len&0x000000FF):0;	

	for (i = 0; i < serialCount; i++)
	{
		if (serialMsg[i].senderId == senderId)
			break;
	}
	
	if (i == serialCount)
	{
		return -1;
	}
	else
	{
		if (devc_wp_write_serial_data(serialMsg[i].handle, strMsg, 9) == -1)
			return -1;
		return 0;
	}
}

int wp_release(int senderId)
{
	int i;
	
	for (i = 0; i < serialCount; i++)
	{
		if (serialMsg[i].senderId == senderId)
		break;
	}

	if (i == serialCount)
	{
		return -1;
	}
	else
	{
		if (devc_wp_close_serial_port(serialMsg[i].handle/*port*/) != 0)
			return -1;
		serialMsg[i].isRunFlag = 0;
		return 0;
	}
}

		//relay operation
/**********************************/
/*    the smae as wp_operation		  */
/**********************************/


		//data sort operation
/**********************************/


void tps_recv_sort(int senderId,char *data,int len)
{
	unsigned char mainBuf[1024] = {0};
	int sumLen = 0; 
	int i;
	int event;
	int iRet;
	WP_PROCESS_EVENT_STRU WP_UIE;
	pthread_t pid;
  
	while(TRUE)
	{
		if(len>= 0)
		{
			memcpy(&mainBuf[sumLen],data,len);
			sumLen +=len;	
			while(sumLen >= 9)
			{	
				unsigned char sortData[9] = {0};
				unsigned char tempBuf[1024] = {0};
				memcpy(sortData,mainBuf,9);
				
				int addData = 0; 				
				for(i =0;i<7;i++)
				{
					addData += (int)sortData[i];
				}
				int addCheck = (int)(sortData[7]+sortData[8]);
				if(addData != addCheck)
				{
					printf("wrong packet\n");	
					return;
				}
				
				sumLen -=9;
				memcpy(tempBuf,&mainBuf[9],sumLen);
				memset(mainBuf,0,1024);
				memcpy(mainBuf,tempBuf,sumLen);
				
				WP_UIE.id = senderId;
				WP_UIE.dataLen = strlen(sortData);
				memcpy(WP_UIE.data,sortData,9);
				WP_UIE.event = event;
				
				iRet = thread_create(&pid, NULL, (void *)uie_wp_process_event, &WP_UIE);
		
			}		
		}
		
		else
		{
			printf("error\n");
			devi_wp_close_serial_port(senderId);			
		}
	}		
}


static pthread_mutex_t wp_mutex = PTHREAD_MUTEX_INITIALIZER;
void *uie_wp_process_event(void *param)
{
	FLXInt32 iRet = 0;
	WP_PROCESS_EVENT_STRU *puie_param = (WP_PROCESS_EVENT_STRU *)param;
	FLXByte data[MAX_LEN];

	FLXInt32 senderId = puie_param->id;
	FLXInt32 event = puie_param->event;
	FLXInt32 dataLen = puie_param->dataLen;
	memcpy(data, puie_param->data,dataLen);
	
	pthread_mutex_lock(&wp_mutex);
	if (!ProcessEvent)
	{
		MSG_OUT("无效的动态库指针ProcessEvent\n");
		goto out;
	}

	iRet = (*ProcessEvent)(senderId, event, data, dataLen);
	if (iRet != 0)
	{
		goto out;
	}
	
out:
	pthread_mutex_unlock(&wp_mutex);
	return;
}


